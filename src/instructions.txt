CATALOG.API

This microservice is built using MongoDb

Selected properties on Catalog.API, on debug tab, changed profile to Catalog.API


Pulled mongo image -> docker pull mongo
docker images => show images


docker ps => show running containers

docker ps -a

docker start a14ace....{containerId}

docker run -d -p 27017:27017 --name shopping-mongo mongo
-d => detach mode
-p => port (forwarding from port 27017 which is the image port number exposed by mongo to 27017 on my local machine
shopping-mongo => container name
mongo => image name

docker exec -it shopping-mongo /bin/bash => opens an interactive terminal inside the container
opens a bash command inside the container

in order to run mongo command in the container, we have to run mongo command first(type mongo then hit enter)

'show dbs' => show database

'use CatalogDb' => create a CatalogDb

db.createCollection('Products') => creates a product collection inside catalog db
db.Products.insert // db.Products.insertMany() 
db.Products.insertMany([{ 'Name':'Asus Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':54.93 }, { 'Name':'HP Laptop','Category':'Computers', 'Summary':'Summary', 'Description':'Description', 'ImageFile':'ImageFile', 'Price':88.93 } ])
db.Products.find({}).pretty() => returns all objects
db.Products.remove({}) => remove all

show databases
show collections

Connecting CatalogApi to mongo db
Install-Package MongoDB.Driver

TESTING API
STEP 1, Make sure docker desktop is running
right click on the solution and open in terminal
run the shopping-mongo container (docker start container id) => use docker ps/ ps -a to show images

ADDING MONGO DB TO DOCKER FILE
Added catalogdb as an image on docker compose and overide the conncetionstring setting
Volumes are used to create file storage out the host file system

to run docker compose
docker-compose -f docker-compose.yml -f docker-compose.override.yml up -d
docker-compose -f docker-compose.yml -f docker-compose.override.yml down -- stop all containers in docker compose
docker-compose -f docker-compose.yml -f docker-compose.override.yml up --build -> to rebuild all containers incase a change has been made to the dockerfile or containerized application

when debuggin with VS
Right click solution and clean the project -> this removes the running container

CATALOG API Url container is exposed on port 8000 -> http://localhost:8000/swagger/index.html


MONGO GUI
In order to visualize the Monga database, we need to pull and run the mongoclient image from docker
docker run -d -p 3000:3000 mongoclient/mongoclient


BASKET.API
docker pull redis -> pulling redis official image
Redis is an open-source, networked, in-memory, key-value data store
Redis -> REmote DIctionary Server

To run the container for redis db
docker run -d -p 6379:6379 --name eshopper-redis redis

To check log
docker logs -f {containername} - docker logs -f eshopper-redis
docker exec -it eshopper-redis /bin/bash => open interactive command window
type redis-cli -> allows you run redis comand inside the container

type ping, response is PONG-> LOL

to create a key value pair
set key value
get key
set name self
get name

Add redis nuget package on basket.api
install-Package Microsoft.Extensions.Caching.StackExchangeRedis

Update-Package -ProjectName Basket.API
BASKET API Url container is exposed on port 8001 -> http://localhost:8001/swagger/index.html


PORTAINER is a tool used to manage containers
Launch localhost:9000 to see the UI
login details
admin, admin1234admin1234

if you dont see the containers, logout and login again, select docker as the container environment

DISCOUNT API
will leverage PostgreSQL Database in order to store discount coupons
PostgreSQL is an open source db

to manage postgree db, we need pgadmin

Install-Package Npgsql
Install-Package Dapper

DISCOUNT API Url container is exposed on port 8002 -> http://localhost:8002/swagger/index.html

After creating the protofile, 
	right click, select properties and set built action to protobuf compiler
	gRPC stub classes -> server only



Developed API GATEWAY using OCELOT


